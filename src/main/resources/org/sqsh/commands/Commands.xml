<Commands>
    <Command name="\echo" class="org.sqsh.commands.Echo">
        
        <Description><![CDATA[
           Displays a line of text.
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\echo [-n] [string] [...]`
              
## Description

Echos the string(s) to standard out.
           
## Options

### --no-newline (-n)

Disables the output of a newline character at the end of the output

## Examples

Display a static string:

    1> \echo "Hello world!"
    Hello world!

Display text with a variable
 
    1> \set x=10
    1> \echo "Value of x is $x"
    Value of x is 10

## See also

[[\set]]
      ]]></Help>
    </Command>
    
    <Command name="\session" class="org.sqsh.commands.SessionCmd">
        
        <Description><![CDATA[
           Displays set of sessions or switches to another session.
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\session [session_id]`
              
## Description

If no arguments are provided then a list of currently active
sessions is displayed, otherwise the session id provided is
switched to.
           
## Options

None

## Examples

When you establish a connection in jsqsh, you have started a _session_, for example:

    1> \connect db2
    Password: *******
    [mydb2.mydomain.com][gray] 1> 

I am now working in a session with the "db2" named connection.  However, jsqsh supports the ability to work with multiple concurrent sessions using the **-n** (or **--new-session**) flag to **\\connect**, like so:

    1> \connect -n bigsql
    Password: *******
    Current session: 2 (jdbc:bigsql://mybigsql.mydomain.com:7052/default)
    [mybigsql.mydomain.com][gray] 1> 
   
And you can view your currently active sessions with the **\\session** command:

    [mybigsql.mydomain.com][gray] 1> \session
    +-----+----------+--------------------------------------------------+
    | Id  | Username | URL                                              |
    +-----+----------+--------------------------------------------------+
    |   1 | gray     | jdbc:db2://mydb2.mydomain.com:51000/MYDB         |
    | * 2 | gray     | jdbc:bigsql://mybigsql.mydomain.com:7052/default |
    +-----+----------+--------------------------------------------------+

And you can switch between sessions using the **\\session** command as well

    [mybigsql.mydomain.com][gray] 1> \session 1
    Current session: 1 (jdbc:db2://mydb2.mydomain.com:51000/MYDB)

and you can end a session (closing the connection) without quitting jsqsh with the **\\end** command:

    [mydb2.mydomain.com][gray] 1> \end
    Current session: 2 (jdbc:bigsql://mybigsql.mydomain.com:7052/default)
    [mybigsql.mydomain.com][gray] 1> 

## See also

[[\connect]], [[\end]]
            ]]></Help>
       </Command>
    
<Command name="\quit" class="org.sqsh.commands.Quit">
        
        <Description><![CDATA[
           Exits jsqsh
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\quit` or `quit`
              
## Description

Exits jsqsh.  The `\quit` command has a built-in alias of `quit`
           
## Options

None.

## See also

[[\alias]]
           ]]></Help>
    </Command>
    
    <Command name="\drivers" class="org.sqsh.commands.Drivers">
        <Description><![CDATA[
           Displays a list of JDBC drivers known by jsqsh.
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\drivers`
              
## Description

Displays a list of drivers that are currently registered with
jsqsh. An asterisk (*) will be displayed next to drivers for
which the actual JDBC implementation (.jar file) is available.

JSqsh comes bundled with one JDBC driver (jtds) which should
be sufficient to communicate with Microsoft SQL Server or Sybase
ASE. Additional drivers can be made available in one of three ways:
   
1. Setting the ${[[classpath]]} jsqsh variable to a location containing
   JDBC jar(s) for the driver(s) you want.
   
2. Making sure the driver is  contained in your CLASSPATH environment
   variable, e.g., for UNIX or cygwin:

        $ CLASSPATH=/path/to/some/jdbc/driver.jar:"$CLASSPATH"
        $ export CLASSPATH

   or, for Windows:
   
        C:\> set CLASSPATH=/path/to/some/jdbc/driver.jar; %CLASSPATH%
        
3. Alternatively, you can add a JDBC driver implementation to jsqsh's
   startup jar directory. The path to this directory can vary from
   platform to platform but can typically be found in one of the
   following locations relative to where the jsqsh binary is located:

        ../lib
        ../share
        ../share/jsqsh

## Driver definition file

JSqsh comes with a bunch of pre-defined driver definitions built-in,
however you can provide your own additional definitions if you wish
by editing the `$HOME/.jsqsh/drivers.xml`. This file contains lots
of comments describing the structure of the file.
           
## Options

### --load=*file* (-l *file*)

Loads an additional `drivers.xml` format file.
   
## See also

[[classpath]]
           ]]></Help>
        </Command>
    
     <Command name="\history" class="org.sqsh.commands.History">
        <Description><![CDATA[
           Displays a history of SQL statements executed
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\history [-a]`
              
## Description

Displays a history of SQL statements executed.
           
## Options

### --all (-a)

  Show all of every SQL statement executed. If this flag is not
  provided only the first 10 lines of any SQL statement will be
  displayed.

## See also

[[\buf-edit|\buf_edit]], [[\buf-copy|\buf_copy]], [[\buf-append|\buf_append]], 
[[\buf-load|\buf_load]], [[buffers]]
           ]]></Help>
    </Command>
    
    <Command name="\connect" class="org.sqsh.commands.Connect">
        <Description><![CDATA[
           Establishes a connection to a database.
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\connect [options] [connection-name]`
              
## Description

The `\connect` command attempts to establish a JDBC connection to a database 
server.  If a connection is successfully established then the connection 
becomes the active connection for the current session. If the session already 
had a connection established, then the existing connection is closed and 
replaced with the new connection.
              
## Connection options

The following options may be used to specify information required to establish 
a database connection (or whatever your chosen JDBC driver considers a 
connection).
  
In the help description below, you will see references to variables like
`${db}` or `${server}`. When an option says that it sets a given variable,
what is referring to is that if you look at a driver definition using the
command [[\drivers]], like so:
   
    1> \drivers
    +-----------------+-------------+--------------------------------
    | Target          | Name        | URL                            
    +-----------------+-------------+--------------------------------
    | * MySQL         | mysql       | jdbc:mysql://${server}:${port} 
   
The option may set one of these variables. Not all variables are meaningful
or used by all drivers.

### --setup (-e)

  Enters the connection setup wizard. This allow you to easily define named 
  connections, so that only the connection name needs to be provided to 
  establish a connection.

### --driver=*driver* (-d *driver*)

  The name of the jsqsh driver definition that will be used for the 
  connection (use `drivers` to see a list).

### --server=*server* (-S *server*)
  
  Sets the value of `${server}`
                         
###  --port=*port* (-p *port*)

  Sets the `${port}` property. This typically defines the listening port 
  of the server you wish to connect to. Most drivers will provide a 
  default value for this property if it is not supplied.
                          
### --database=*db* (-D *db*)

  Sets the `${db}` property. This will cause the database context to be set 
  to the provided database following connection to the server (in the JDBC 
  world the database context is known as the "catalog"). Not all drivers 
  support this behavior.

### --username=*user* (-U *user*)

  Sets the `${user}` property that determines the username that will be 
  utilized to connect to the database.
                          
### --password=*pass* (-P *pass*)

  Sets the ${password} property that will be used to authenticate with the 
  server.
                          
### --sid=*SID* (-s *SID*)

  Sets the `${SID}` property, and provides the Oracle SID that will be used 
  when connecting to Oracle.

### --jdbc-url=*url* (-u *url*)

  This option allows you to provide an explicit JDBC URL to utilize when 
  establishing the connection rather than using jsqsh's driver mechanism. 
  Typically use of this parameter also requires the use of the `--jdbc-class`
  argument as well.
               
### --jdbc-class=*class* (-c *class*)

  When utilizing a direct JDBC url (and not a jsqsh driver definition), this 
  should be utilized to define which JDBC driver class will be utilized for 
  the connection.
                          
### --domain=*domain* (-w *domain*)

  For Windows based authentication, sets the `${domain}` property, specifying 
  the windows domain to be utilized when establishing the connection. Not 
  all JDBC drivers support this functionality.
                       
### --prop=*name=value* (-O *name=value*)

  This option allows JDBC driver properties to be explicitly set prior to 
  connecting, and may be listed more than once. For example:
                      
    \connect --prop compress=true --prop failover=false
                        
  The set of properties that are available are specific to a given JDBC 
  driver, so you'll need to consult the documentation for your driver for 
  details.
                      
### --new-session (-n)

  Create a new session for this connect without closing the connection 
  in the current session. You can manage, view, and switch active sessions 
  with the [[\session]] command.
                      
### connection-name

   If provided, this indicates the logical connection name that should be 
   used to establish the connection. If additional arguments are provided, 
   then they will override the same options associated with the logical 
   connection name. See **Named connections** below for details.
                      
## Named connection options

Because many options may be required to establish a connection, it can be
quite tedious to provide these options each and every time you connect,
so jsqsh provides a mechanism by which you can establish a name for a given
set of connection properties and then use this name instead of providing
all of the connection properties.
   
See **Named connections**, below, for details.
   
### --list (-l)
  Lists all available logical connection names. See **Named connections**
  below for details.
                      
### --add=*name* (-a *name*)

  This option is used to define (or replace) a logical connection name. 
  See **Named connections** below for details.
 
### --update (-R)

  This option is used to merge together the settings in an existing name 
  connection with any additional options you provide. For example, if your 
  password was changed on a given server you can do:
                      
    \connect -Pnewpass --update proddb
                         
  where *proddb* is the named connection you wish to update.
                      
### --remove (-r)

  This option is used to remove a logical connection name. If this 
  option is provided a connection-name must also be provided. See 
  **NAMED CONNECTIONS** below for details.

### --show-password (-x)

  When used with the --list option, causes the connection password to 
  be displayed in clear-text.

## Named connections

Because a relatively significant number of parameters are required to
be passed to \connect in order to establish a connection, jsqsh provides
a relatively simple mechanism by which a "name" can be associated with
the set of parameters required to create the connection.  Later attempts
to connect to the same server can be performed simply by providing the
logical name rather than the full parameter set.
   
For example:
   
    1> \connect -Usa -Ppassword -Sprod -p5000 -dsybase --add=PROD
      
will create a connection to a Sybase server (on host prod, port 5000 as sa)
and associate the name 'PROD' with this set of parameters.
   
Later attempts to connect to the same server can be accomplished simply
by providing same name back to \connect:
   
    1> \connect PROD
      
Any of the parameters that were associated with the logical connection
may be overridden using normal command line parameters. For example:
   
    1> \connect -Usgray PROD
      
would cause the connection to be established as 'sgray' (rather than 'sa'
which was original defined).
   
And similarly, persistent edits can be made to an existing named connection
by re-adding the definition along with the change, like so:
   
    1> \connect --add=PROD -Usgray PROD
      
and in the same fashion, a copy with edits can be made:
   
    1> \connect --add=PROD2 -Usgray PROD
      
To view the set of logical connection names currently being managed, you
an use the `--list` argument:
   
    1> \connect --list
    +------+--------+--------+------+--------+----------+----------+--------
    | Name | Driver | Server | Port | SID    | Username | Password | ...    
    +------+--------+--------+------+--------+----------+----------+--------
    | PROD | sybase | prod   | 5000 | [NULL] | sa       | *******  | ...
    +------+--------+--------+------+--------+----------+----------+--------
   
To delete a logical connection name, use the --remove argument:
   
    1> \connect --remove PROD
      
 Logical connection names are persistent (they exist between executions
 of jsqsh) and are defined in the file `$HOME/.jsqsh/connections.xml`.
   
## Default values

For any of the variables set by options described in the OPTIONS 
section, above, you may provide a default for that variable by
prefixing the variable name with "dflt_" in your session. For example:
   
    \set dflt_port=5555
      
would cause default value of `${port}` to be 5555 unless the `-p` option
is provided to override that value.
   
## Variables set

After a connection is successfully established, the variables described
in the OPTIONS section will be available privately to your session. 
Thus, the variable $port would expand to be the port that was used
when connecting to your session.

## See also

[[\set]], [[\drivers]]
               
]]></Help>
</Command>

<Command name="\go" class="org.sqsh.commands.Go">
<Description><![CDATA[
   Executes the contents of the current buffer
    ]]></Description>
           
    <Help><![CDATA[
## Synopsis

`\go [-i table] [-h] [-f] [-m style] [-n repeat] [-t sec]`
              
## Description

Executes the SQL statement contained in the current buffer.  This command
is also provided by a built-in alias of `go`.
           
## Options

### --insert=*table* (-i *table*)

  Causes the results to be generated as INSERT statements for 
  the specified table name. This flag causes the value provided by 
  `-m` to be ignored.

### --display-style=*style* (-m *style*)

  Specifies a custom display style for showing the results of the 
  execution. The available styles may be found by running `\help style`. 
  Note that the set of valid display styles depends upon the type of 
  session that is currently established. For example, attempting to set 
  a SQL display style, such as `pretty` for a non-SQL session will cause 
  an error.

### --no-headers (-H)

  Toggles the display of column header information. This flag  effectively 
  flips the  value of ${[[header]]} for the duration of the query execution.

### --repeat=n (-n)

  Execute the SQL n times, reporting the total and average execution times. 
  When this flag is provided the variable ${iteration} will be available 
  during variable expansion and will reflect which iteration the query 
  is being executed in (starting from 0).

### --no-footers (-F)

  Toggles the display of result footer information (row count and timing 
  information). This flag effectively flips the  value of ${[[footer]]} for 
  the duration of the query execution.

### --timeout=*sec* (-t *sec*)

  Places a time restriction (in terms of seconds) on the query.  If the 
  underlying driver supports setting query timeouts, then the driver will 
  be asked to do the timeout processing. If the driver does not support such 
  a feature then jsqsh will automatically cancel the query when the timeout 
  period has been reached.

## See also

[[style]], [[header]], [[footer]], [[timer]]
        ]]></Help>
    </Command>

    <Command name="\reset" class="org.sqsh.commands.Reset">
        <Description><![CDATA[
              Clears the current SQL buffer of its contents.
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\reset`
              
## Description

Adds the current SQL command buffer to the list of historical
buffers (viewable with \history) and creates a fresh buffer.
           
## Options

None.

## Examples

    1> select count(*) 
    2> from t1, t2, t3
    3> \reset
    1> 
        ]]></Help>
    </Command>
    
    <Command name="\set" class="org.sqsh.commands.Set">
        <Description><![CDATA[
           Sets a variable or displays all variables.
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\set [[-x] [-l] name=value]`
              
## Description

Sets a variable or displays all variables.
           
## Options

If no arguments are provided to `\set`, then the value of all variables is displayed.
              
### --export (-x)

Will cause the variable to be exported to the environment of any processes that are 
spawned by jsqsh during its execution.

### --local (-l)

Sets the value of the variable local to the current session only. No other sessions will 
see it and it will mask similarly named variables in other session.

## See also

[[\echo]]
     ]]></Help>
    </Command>
    
    <Command name="\unset" class="org.sqsh.commands.Unset">
        <Description><![CDATA[
           Removes a jsqsh variable.
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\unset var_name [var_name ...]`
              
## Description

Unsets one or more jsqsh variables. Note that any variable that appears in
`\help vars` is a special configuration variable and may not be unset with
this command.
              
Removing a session-local variable (created with `\set -x`), will re-expose 
any global variable of the same name. Two calls to [[\set]] would need to be 
invoked to completely remove the variable in this case.
  
## Options
  None.

## See also

[[\set]]
         ]]></Help>
    </Command>
    
    <Command name="\help" class="org.sqsh.commands.Help">
        <Description><![CDATA[
           Displays help for a jsqsh command
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\help [--raw] [[topics|vars|commands] | item]`

## Description

Displays help for a jsqsh command. If no arguments are provided,
`\help` provides a list of available categories of help: topics, vars
(variables), or commands. Running \help with one of those category
names lists a set of help items available within the category.
  
## Options

### --raw (-r)

Jsqsh documentation is stored internally in a simple markup format
called "markdown".  The --raw flag causes the raw markdown to be
displayed.

### topics

Displays a list of general help topics about jsqsh

### vars

Displays a list of all variables that control jsqsh's behavior

### commands

Displays a list of all jsqsh commands

### *item*

Given the name of a topic, variable, or command displays detailed 
help for it.
  
## Command line option

All jsqsh commands take a special command line option of `--help` or `-h`
which will cause help to be displayed on the available command line
options available for the command.

## See also

[[arguments]]
        ]]></Help>
    </Command>
    
    <Command name="\wrap" class="org.sqsh.commands.Wrap">
        <Internal>True</Internal>
        <Description><![CDATA[
           Used internally for testing of jsqsh's word-wrapping facility.
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis
  wrap [width]
              
## Description

Wraps the text contained in the current buffer at the specified width and 
starts a new buffer.  This command is available to test some internal 
handling of word-wrapping in jsqsh and doesn't really have any practical
uses.
           
## Options

### width

Specified the width at which word-wrapping will occur.
        ]]></Help>
    </Command>
    
    <Command name="\buf-copy" class="org.sqsh.commands.BufCopyOrAppend">
        <Description><![CDATA[
           Copies the contents of one SQL buffer into another
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\buf-copy src-buf [dst-buf]`
              
## Description

The `\buf-copy` command is utilized to copy the contents of one
SQL buffer into another SQL buffer, replacing the contents of
the receiving buffer.
              
History buffers may be referenced using the special reference
notation `!..`, where each dot indicates how far back in
history (`!.` is the current buffer `!..` the previous, and
so on).  Or with the special reference notation `!N` where 
**N** refers to the **N**th historical buffer.
              
For example:
              
    \buf-copy !5 !.
                
copies the SQL you ran 5 queries ago, to the current buffer.
           
## Options

### src-buf

Indicates the buffer that you are copying from.
              
### dst-buf

Indicates the buffer you are copying to. If not provided 
this default to `!.`.

## See also

[[buffers]]
       ]]></Help>
    </Command>
    
    <Command name="\buf-append" class="org.sqsh.commands.BufCopyOrAppend">
        <Description><![CDATA[
           Appends the contents of one SQL buffer into another
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\buf-append src-buf [dst-buf]`
                  
## Description

The `\buf-append` command is utilized to append the contents of one
SQL buffer into another SQL buffer.
                  
History buffers may be referenced using the special reference
notation `!..`, where each dot indicates how far back in
history (`!.` is the current buffer `!..` the previous, and
so on).  Or with the special reference notation `!N` where 
**N** refers to the **N**th historical buffer.
                  
For example:
                  
    \buf-append !5 !.
                    
appends the SQL you ran 5 queries ago to the current buffer.
               
## Options

### src-buf

Indicates the buffer that you are copying from.
                  
### dst-buf

Indicates the buffer you are append to. If not provided this default 
to `!.`.

## See also

[[buffers]]
        ]]></Help>
    </Command>
        
    <Command name="\buf-edit" class="org.sqsh.commands.Edit">
    
        <Description><![CDATA[
           Edits a SQL buffer
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\buf-edit [src-buf] [dst-buf]`
              
## Description

The `\buf-edit` command is used to edit the contents of a SQL buffer
with an external text editor.  The external editor can be defined
using the variable `${EDITOR}` or `${VISUAL}`. If neither of these variables
is defined, then an appropriate text editor is chosen based upon the
operating system in which jsqsh is executing. Specifically, windows
platforms will attempt to execute `notepad.exe` while other platforms
will attempt to run `vi`.
 
## Aliases 

By default the `\buf-edit` command is aliased to `vi` and `emacs`.
           
## Options

### src-buf

Indicates which buffer should be edited. If no src-buf is provided, then 
the current buffer will be edited (`!.`). If the current buffer is empty, 
then the previous buffer will be used.
             
### dst-buf

Indicates in which buffer the edited SQL should be placed. If no destination 
is provided then the current buffer (`!.`) is chosen.
 
## See also

[[\buf-append|\buf_append]], [[\buf-copy|\buf_copy]], [[buffers]]
        ]]></Help>
    </Command>
    
    <Command name="\alias" class="org.sqsh.commands.AliasCmd">
        <Description><![CDATA[
           Creates an alias
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\alias [-G] [name=text]`
              
## Description

An alias in jsqsh is slightly different (and potentially more dangerous
if misused) than the UNIX shell equivalent. In jsqsh, an alias defines a 
piece of text that, when encountered in a user's input, is replaced with
another piece of text. 
   
In its simplest form, it is typically used to allow you to rename commands
so that you can refer to them the way you want to. For example:
   
    1> \alias exit='\quit'
       
will allow you to type:
   
    1> exit
       
to quit jsqsh (note single quotes around the `\quit`. The single quotes
prevent jsqsh from trying to interpret and remove the back-slash).
   
Another common use of `\alias` may be to provide pre-argumented commands.
For example:
   
    1> \alias '\prod'='\connect -U sa -S prod-db -d mssql-jtds'
      
will allow you to later connect to the production database with:
   
    1> \prod-db
    Password: 
      
And, now for the dangerous part. Under normal circumstances aliases only
apply to the first word encountered on an input line. That is, with
the input:
   
    1> \alias one=1
    1> select 'one';
   
the results of the select statement would be the word 'one'. However,
supplying the `-g` flag to alias causes the word to be replace ANYWHERE
it appears in the line of input. so:
   
    1> \alias -g one=1
    1> select 'one';
     
would return a result set with '1' in it. 
   
Why is this so dangerous? Well, it means that you can do silly things
like:
   
    1> \alias select='shutdown with no wait select'
     
I'll leave it as an excersize for the reader to figure out what this
would do (although it would only be effective on Sybase or MSSQL).
     
## Options

### --global (-G)

Causes an alias to be applied globally to a line, anywhere the name of 
the alias appears. Without this flag, the alias will only apply if it 
is the first word on the line.
        ]]></Help>
    </Command>
    
    <Command name="\end" class="org.sqsh.commands.End">
        <Description><![CDATA[
           Ends the current session
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\end [next-session]`
              
## Description

The `\end` command ends the current session and switches to another session.
           
## Options

### next-session  

If provided, causes the current session to be ended and the context switched 
to a specific session (to see a list of session's, run the `\session` command). 
If not provided, then the next available session will be utilized.

## See also

[[\connect]], [[\session]]
        ]]></Help>
    </Command>
    
    <Command name="\buf-load" class="org.sqsh.commands.BufLoad">
        <Description><![CDATA[
           Loads an external file into a SQL buffer
        ]]></Description>
           
        <Help><![CDATA[
## Synopsis

`\buf-load [-a] filename [dest-buf]`
              
## Description

The `\buf-load` command reads the contents of an external file into
a SQL buffer. By default jsqsh will come with an alias for `\buf-load`
of `:r`, so that you can do:
   
    1> :r filename.sql
      
to read in the filename. If you do not want this behavior, then you
can `\unalias :r` in your `$HOME/.jsqsh/sqshrc` file.
           
## Options

### --append (-a)

Causes the contents of the file to be appended to the SQL buffer, rather 
than replacing its contents.

### filename

The name of the file to be read

### dest-buf

The name of the destination buffer to read the file into. The default 
is `!.` (the current buffer).
             
## See also

[[\history]], [[buffers]]
        ]]></Help>
    </Command>
    
    <Command name="\tables" class="org.sqsh.commands.Tables">
        <Description>Displays tables, views, synonyms, etc.</Description>
           
        <Help><![CDATA[
## Synopsis

`\tables [--type type] [[[catalog.]schema-pattern.]object-pattern]`
              
## Description

The `\tables` command is deprecated, it is suggested to use the `\show`
command instead.

Displays information about table objects (as the server defines a table).
This functionality relies upon support from the underlying JDBC driver
and thus may fail against some platforms. 
   
The names provided (catalog, schema-pattern, and object-pattern) are 
all interpreted as follows
   
If the name is not surrounded by double quotes, then the name is normalized
according to the database specific normalization rules (these rules are
defined in the internal jsqsh driver definition, and not all database
vendors are currently properly defined, see `\help drivers` for details).
So, for example, the following run while connected to DB2:
       
    \tables my%
   
is the equivalent of doing:
   
    \tables MY%
       
because DB2 name normalization always converts to upper case, and matching
is case sensitive in DB2, so the table must be named something like "MYTAB" 
to get results back.  If you wish to force a specific case, surround 
the name with double quotes, like:
   
    \tables "my%"
   
which forces the name to be matched in exactly the case specified.
   
Please note that, other than the above notes, the behavior of `\tables` in 
terms of wild card characters and name matching is entirely at the mercy
of how the JDBC driver is implemented.
   
## Options
  
### --all (-a)

Display all metadata description columns instead of the default reduced set.

### --type=*type* (-T *type*)

This can be used to restrict the types of objects that are displayed. If 
type is not provided, then all object types are returned. Available types 
are:
        
Type     | Description
---------|------------------------------------
user     | Displays only user-created tables 
system   | Displays only system tables 
view     | Displays only views
alias    | Displays only aliases
synonym  | Displays only synonyms

### catalog

The catalog (or database for some vendors) in which the object resides. 
If not provided then the current catalog is assumed.

### schema-pattern

The name of the schema in which the object resides, which may
include SQL wildcard characters. If the catalog name is provided 
and the schema is not, like:
                  
    \tables mydb..my%
               
then all schemas within the catalog are matched.  If the catalog
name is not provided and the schema is not provided, like:
               
    \tables my%
               
Then:

1. If the JDBC driver is 1.7 or later and supports the
   necessary API's, to retrieve the current schema, then the 
   current schema is assumed.  Otherwise...
2. If the jsqsh driver definition has a query installed to
   fetch the current schema from the database, then the 
   current schema is assumed. Otherwise...
3. All schemas are matched

### object-pattern

The object name to be described, which may contain SQL wild cards to 
match multiple objects.                

## See also

[[\show]], [[\databases]], [[\describe]], [[\procs]], [[\drivers]]
        ]]></Help>
    </Command>
    
    <Command name="\procs" class="org.sqsh.commands.Procs">
        <Description>Displays stored procedures</Description>
           
        <Help><![CDATA[
## Synopsis

`\procs [[[catalog.]schema-pattern.]proc-pattern]`
              
## Description

Displays information about stored procedure objects in the database server
This functionality relies upon support from the underlying JDBC driver
and thus may fail against some platforms. 
   
The names provided (catalog, schema-pattern, and proc-pattern) are 
all interpreted as follows
   
If the name is not surrounded by double quotes, then the name is normalized
according to the database specific normalization rules (these rules are
defined in the internal jsqsh driver definition, and not all database
vendors are currently properly defined, see `\help drivers` for details).
So, for example, the following run while connected to DB2:
       
    \procs my%
   
is the equivalent of doing:
   
    \procs MY%
       
because DB2 name normalization always converts to upper case, and matching
is case sensitive in DB2, so the table must be named something like "MYPROC" 
to get results back.  If you wish to force a specific case, surround 
the name with double quotes, like:
   
    \procs "my%"
   
which forces the name to be matched in exactly the case specified.
   
Please note that, other than the above notes, the behavior of `\procs` in 
terms of wild card characters and name matching is entirely at the mercy
of how the JDBC driver is implemented.
   
## Options

### catalog

The catalog (or database for some vendors) in which the object resides. 
If not provided then the current catalog is assumed.

### schema-pattern

The name of the schema in which the object resides, which may include 
SQL wildcard characters. If the catalog name is provided and the schema 
is not, like:
                  
    \procs mydb..my%
               
then all schemas within the catalog are matched.  If the catalog
name is not provided and the schema is not provided, like:
               
    \procs my%

Then:

1. If the JDBC driver is 1.7 or later and supports the
   necessary API's, to retrieve the current schema, then the 
   current schema is assumed.  Otherwise...
2. If the jsqsh driver definition has a query installed to
   fetch the current schema from the database, then the 
   current schema is assumed. Otherwise...
3. All schemas are matched
               
### proc-pattern

The procedure name to be described, which may contain SQL wild cards 
to match multiple procedures.        

### See also

[[\show]], [[\databases]], [[\describe]], [[\tables]]
        ]]></Help>
    </Command>
    
    <Command name="\databases" class="org.sqsh.commands.Databases">
        <Description>Displays set of available databases (catalogs)</Description>
           
        <Help><![CDATA[
## Synopsis

`\databases`
              
## Description

Displays the set of databases (a.k.a "catalogs") that are available
on the server. Not all database servers support multiple database
instances, so the command may fail in these circumstances.
   
## Aliases

JSqsh automatically aliases this command as `\dbs`.
   
## Options

None.
   
## See also

[[\show]], [[\tables]], [[\describe]]
        ]]></Help>
    </Command>
    
    <Command name="\describe" class="org.sqsh.commands.Describe">
        <Description>Displays a description of a database object</Description>
           
        <Help><![CDATA[
## Synopsis

`\describe [-a] [[catalog.]schema-pattern.]object-pattern`
              
## Description

Displays the database structure for a provided object name. This functionality relies 
upon support from the underlying JDBC driver and thus may fail against some 
platforms. 
   
The names provided (catalog, schema-pattern, and object-pattern) are 
all interpreted as follows
   
If the name is not surrounded by double quotes, then the name is normalized
according to the database specific normalization rules (these rules are
defined in the internal jsqsh driver definition, and not all database
vendors are currently properly defined, see "\help drivers" for details).
So, for example, the following run while connected to DB2:
       
    \describe mytab
   
is the equivalent of doing:
   
    \describe MYTAB
       
because DB2 name normalization always converts to upper case, and matching
is case sensitive in DB2, so the table must be named "MYTAB" to get results
back.  If you wish to force a specific case, surround the name with double
quotes, like:
   
    \describe "mytab"
   
which forces the name to be matched in exactly the case specified.
   
Please note that, other than the above notes, the behavior of describe in 
terms of wild card characters and name matching is entirely at the mercy
of how the JDBC driver is implemented.
   
## Options

### --all (-a)

Shows all available information about the table that the JDBC driver provides. 
Without this flag `\describe` will attempt to keep the output to the more useful data.

### catalog

The catalog (or database for some vendors) in which the object resides. If not 
provided then the current catalog is assumed.

### schema-pattern

The name of the schema in which the object resides, which may include SQL wildcard 
characters. If the catalog name is provided and the schema is not, like:
                  
    \describe mydb..mytable
               
then all schemas within the catalog are matched.  If the catalog name is not provided 
and the schema is not provided, like:
               
    \describe mytable

Then:

1. If the JDBC driver is 1.7 or later and supports the
   necessary API's, to retrieve the current schema, then the 
   current schema is assumed.  Otherwise...
2. If the jsqsh driver definition has a query installed to
   fetch the current schema from the database, then the 
   current schema is assumed. Otherwise...
3. All schemas are matched
               
### object-pattern

The object name to be described, which may contain SQL wild cards to match multiple 
objects.
   
## See also

[[\show]], [[\tables]], [[\drivers]]
        ]]></Help>
    </Command>
    
    <Command name="\macro" class="org.sqsh.commands.Macro">
        <Description>Creates a velocimacro from the current buffer</Description>
           
        <Help><![CDATA[
## Synopsis

`\macro`
              
## Description

The `\macro` command takes the current buffer that you are typing into and runs 
it through the Velocity engine, with the primary purpose of allowing you to define 
re-usable macros (velocimacros)
   
By way of example:
   
    1> #macro (prod $tab)
    2> use $tab
    3> #end
    4> \macro
    Ok.
    1> #u('master')
    2> \go
      
We have defined a macro called #u() that takes the name of a database
and expands to be  "use" command on that database (granted, this is a
pretty worthless example, but you get the idea).
   
For more details on velocity, see 
[velocimacros](http://velocity.apache.org/engine/releases/velocity-1.7/user-guide.html#Velocimacros)
 
## Options

None
   
## See also

[[buffers]], [[expand]]
        ]]></Help>
    </Command>
    
    <Command name="\eval" class="org.sqsh.commands.Eval">
        <Description>Read and execute an input file full of SQL</Description>
           
        <Help><![CDATA[
## Synopsis

`\eval filename`
              
## Description

The `\eval` command reads in and processes a file full of SQL in the context
of the current session. That is, it treats the SQL and/or jsqsh commands 
contained in the file as if you had typed them at the prompt. The one 
exception to this rule is that the SQL contained in the file will not be
added to your SQL history.
   
## Aliases

This command is automatically aliased to `:e`, so that you may do:
   
    :e filename
      
at the prompt.
   
## Options

### --repeat=*n* (-n *n*)

Execute the SQL contained in the input file *n* times. When this flag is 
provided the variable ${iteration} will be available during variable 
expansion and will reflect which iteration is being executed (starting from 0). 

### filename

The name of the file to execute.
   
## See also

[[\buf-load|\buf_load]]
        ]]></Help>
    </Command>
    
    <Command name="\parse" class="org.sqsh.commands.Parse">
        <Internal>true</Internal>
        <Description>(Internal) Used to test SQL parsing</Description>
           
        <Help><![CDATA[
## Synopsis

`\parse`
              
## Description

The `\parse` command is used internally for jsqsh development. It
is used to parse the contents of the current SQL buffer which is
a component of the tab completion logic.
   
## Options

None.
        ]]></Help>
    </Command>
    
    <Command name="\debug" class="org.sqsh.commands.Debug">
        <Internal>true</Internal>
        <Description> Used to enable debugging</Description>
           
        <Help><![CDATA[
## Synopsis

`\debug class [class ...]`
              
## Description

The `\debug` command is used internally for jsqsh development to 
enable debugging messages for specific jsqsh classes.
   
## Options

None.
        ]]></Help>
    </Command>
    
    <Command name="\diff" class="org.sqsh.commands.Diff">
        <!-- Not ready for prime time -->
        <Internal>True</Internal>
        <Description>Compares results from multiple sessions</Description>
           
        <Help><![CDATA[
## Synopsis

`\diff [-e [0-2]] [-u [0-3]] session_id [session_id ...]`
              
## Description

The `\diff` command executes the current SQL buffer in the current
session as well as all of the sessions specified as arguments and
compares the results to determine if they are identical.
   
The comparison includes:
   
* Exceptions thrown must be identical
* Meta-data for results must be identical
* Values in rows must be identical
   
## Options

### --execution-string=*N* (-e *N*)

Specifies the stringency level to be used when comparing exceptions 
between results:

N  | Description
---|---------------------------------
0  | Compared presence of an exception 
1  | The text of the exceptions must be the same
2  | The SQL Status of the exceptions must be the same
3  | The SQL Error Code of the exceptions must be the same

### --update-stringency=*N* (-u *N*)

Specifies the stringency level to be used when comparing the update 
counts (the "rows affected") returned between results. 

N  | Description
---|---------------------------------
0  | Update counts are not compared
1  | Only compare non-zero update counts
3  | Update counts must be identical.
        ]]></Help>
    </Command>
    
    <Command name="\insert" class="org.sqsh.commands.Insert">
        <Description>Generates INSERT statements from a query</Description>
           
        <Help><![CDATA[
## Synopsis

`\insert [options] table_name`
              
## Description

The `\insert` command executes the current SQL buffer and turns any
result sets that are returned by the query into SQL INSERT statements.
This is similar to executing the `\go` command with  its `-i` option, 
except that a more fine grained control of how the inserts are processed
is available.
   
By default, `\insert` simply displays the INSERT statement(s) to the 
screen, however if the `-s` flag is provided a connection maintained
by a different session may be used to execute the INSERT statements.
   
## Options

### --batch-size=*rows* (-b *rows*)

Specifies the number of rows that should be "batched" together. If the 
`-s` option is not used, then this indicates how often a `go` is displayed 
to the screen. If the `-s` option is used, then the specified number of
INSERT statements is executed at once, followed by a commit.
                  
### --target-session=*id* (-s *id*)

Provides a target session id for execution of the INSERT statements that 
are generated.  The provided session must be connected to a database server to
function.

### --multi-row (-m)

Enables support for platforms that allow multiple rows to be inserted in a 
single INSERT statement. When enabled the batch size (-b) indicates the 
number of rows per insert statement.

### --terminator=*term* (-t *term*)

Changes the batch terminator from the default `go` to the string provided.

## See also

[[\go]]
        ]]></Help>
    </Command>
    
    <Command name="\select" class="org.sqsh.commands.Select">
        <Description>Generates a SELECT using table definitions</Description>
           
        <Help><![CDATA[
## Synopsis

`\select [-p] [-n] table_name [table_name ...]`
              
## Description

The `\select` command generates a SELECT statement based upon the
set of tables provided as an argument.
   
If more than one table is provided to `\select`, then an appropriate
WHERE clause will attempt to be generated to join the tables together.
If the `-n` flag is provided, then the WHERE clause will be the "natural
join" of the tables--that is, all columns of the same name and type 
will be joined together.  If the `-n` flag is not provided, then the join
will be created by analyzing the foreign key/primary key relationships
between the tables. 
   
The `\select` command requires proper meta-data support from the underlying
JDBC driver and may not work properly for all driver implementations.
   
## Options

### --natural-join (-n)

Cause the join clause that is produced to be based upon the "natural join" 
of the columns in the tables. The natural join attempts to join all columns 
of the same name and datatype.
       
### --print (-p)

Causes the SELECT statement to just be printed to the screen rather than 
placing it into the SQL buffer for execution.
   
### See also

[[\go]]
        ]]></Help>
    </Command>
    
    <Command name="\create" class="org.sqsh.commands.Create">
        <Description>Generates a CREATE TABLE using table definitions</Description>
           
        <Help><![CDATA[
## Synopsis

`\create [-p] table_name`
              
## Description

The `\create` command generates a CREATE TABLE statement based upon the name of the 
table provided on the command line.
   
The definition of the table is determined by asking the JDBC driver for metadata 
information about the table, so the CREATE statement will only be as accurate as 
the driver reports. In addition, the current implementation of the `\create` command 
does not include anything other than column names, types, and nullability.  That 
is, it does not include any primary or foreign key information or check constraints.
   
## Options

### --print (-p)

Causes the CREATE TABLE statement to just be printed to the screen rather than 
placing it into the SQL buffer for execution.
                
## See also

[[\select]]
        ]]></Help>
    </Command>
    
    <Command name="\call" class="org.sqsh.commands.Call">
        <Description>Call a prepared statement</Description>
           
        <Help><![CDATA[
## Synopsis

`\call [-f file] [-i] [arg ...]`
              
## Description

NOTE: The `\call` command may not be as necessary with the addition of jsqsh's
special handling of the CALL statement.  See [[storedprocs]] for details. 

The `\call` command is similar to the `\go` command except that the SQL contained 
the the SQL buffer is treated as a callable (prepared) statement. The arguments 
for the statement can be supplied either as arguments on the command line, or 
can be read from a file full of comma separated values (CSV format).
   
## Options

### --file=*file* (-f *file*)

Indicates that the arguments for the query should be pulled from a CSV file, 
provided. See **File input parameters**, below.

### --ignore-header (-i)

If a CSV file is to be used for input, this indicates that the first line of 
the input file is assumed to be header information and discarded. 
   
## Command line parameters

The simplest form of executing `\call` is to pass the parameters to the
statement on the command line, such as:
   
    1> select * from sysobjects where name = ?
    2> \call syscolumns
      
Or, if you want to call a stored procedure, you can do:
   
    1> {call sp_who(?)}
    2> \call 112
      
See **Typed parameters**, below for how to deal with parameters of types other 
than strings.
      
## File input parameters

Perhaps the most powerful feature of the `\call` command is its ability
to utilize an input comma separated values (CSV) file for a source
of arguments to the query or stored procedure.  In this case, the
query is executed once for each line in the source file.
   
For example, assuming that you have a file called `test.csv`  that looks 
like:
   
    1,2,3
    4,5,6
      
you can do:
   
    1> select ?, ?, ?
    2> \call --file test.csv
      
which will result in:
   
    +---+---+---+
    |   |   |   |
    +---+---+---+
    | 1 | 2 | 3 |
    +---+---+---+
    1 row in results
    ok. (first row: 2ms; total: 2ms)
    +---+---+---+
    |   |   |   |
    +---+---+---+
    | 4 | 5 | 6 |
    +---+---+---+
    1 row in results
    ok. (first row: 0ms; total: 1ms)
    
In this example, the fields in the input file exactly match those
of the query being executed, however in cases where you wish to
selectively utilize fields in the input file, you can specify 
the field number from the file on the command line, like so:
   
    [T:]#N
      
where `T:` is the optional type (see **Typed parmeters**, below) and
*N* refers to the field number from the input file you wish to utilize,
starting from 1. For example, using our example above:
   
    1> select ?, ?, ?
    2> \call --file test.csv #3 #2 #1
     
    +---+---+---+
    |   |   |   |
    +---+---+---+
    | 3 | 2 | 1 |
    +---+---+---+
    1 row in results
    ok. (first row: 2ms; total: 2ms)
    +---+---+---+
    |   |   |   |
    +---+---+---+
    | 6 | 5 | 4 |
    +---+---+---+
    1 row in results
    ok. (first row: 0ms; total: 1ms)
    
using this syntax, field can be selectively used, rearranged, or discarded 
as desired.
   
## CSV file format
   
The following assumptions are made when interpreting the contents of
the CSV file:
   
* It conforms to: http://www.creativyst.com/Doc/Articles/CSV/CSV01.htm
* Completely empty fields are treated as NULL values.
* Zero-length strings should be given as fields with ""
     
Note that this lines up exactly with how the "csv" display style outputs its 
data (hint hint).
   
## Mixing file and command line parameters

If desired, you may also mix command line parameters and file based
parameters together, like so:
   
    1> select ?, ?, ?
    2> \call --file test.csv #3 a #1
      
    +---+---+---+
    |   |   |   |
    +---+---+---+
    | 3 | a | 1 |
    +---+---+---+
    1 row in results
    ok. (first row: 2ms; total: 2ms)
    +---+---+---+
    |   |   |   |
    +---+---+---+
    | 6 | a | 4 |
    +---+---+---+
    1 row in results
    ok. (first row: 0ms; total: 1ms)
   
## Typed parameters

For most platforms, the parameters passed to a prepared statement must
be of the appropriate datatype for the query. For these cases, the `\call`
command allows a datatype prefix for the arguments provided. These
prefixes are:
   
Argument  | Description
----------|------------------------------------
S:*value*   | Specifies a string value
C:*value*   | Specifies a character value
Z:*value*   | Specifies a boolean value
D:*value*   | Specifies a double value
I:*value*   | Specifies an integer value
J:*value*   | Specifies a long (64 bit integer) value
R:        | (Oracle or DB2) Output a REFCURSOR 

The `R:` argument acts as a place holder for dealing with Oracle or DB2
REFCURSOR output parameters. After the call is executed, the contents 
of the refcursor will be displayed.
      
for example:
   
    1> select * from sysobjects where id = ?
    2> \call I:1234
      
or:
   
    1> select ?, ?, ?
    2> \call --file test.csv #1 I:#2 #3
      
indicates that field #2 in test.csv is an integer field.

## REFCURSORS

Unlike most "normal" databases, Oracle and DB2 stored procedures are incapable
of directly streaming result sets back to the user and procedures are
instead expected to return results via special output parameters of type
REFCURSOR.  For example, the following procedures:
   
    create or replace procedure ref_example (
        i_owner in varchar2
        o_rc1   out sys_refcursor
    )
    as
    begin
        open o_rc1 for
        select * 
          from SYS.ALL_OBJECTS
         where OWNER = i_owner
    end;
 
If you were to just execute the procedure like so:

    1> {call ref_example (?)}
    2> \call SYS
      
you would get no results back. Instead, you must let `\call` know that
the second argument is a refcursor with the special `r:` place holder:
   
    1> {call ref_example (?, ?)}
    2> \call SYS r:
      
upon execution, jsqsh will open the REFCURSOR argument and display its
results just as if it were a normal result set.
      
## See also

[[\go]], [[storedprocs]], [[style]]
        ]]></Help>
    </Command>
 
    <Command name="\tree" class="org.sqsh.commands.Tree">

        <Description><![CDATA[
           Shows a tree view of all the tables
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\tree [--table-pattern=pat] [--schema-pattern=pat]`

## Description

A tree view of all tables.

## Options

### --table-pattern=*pattern* (-p *pattern*)

A SQL pattern to be used to filter the set of object names that are displayed.

### --schema-pattern=*pattern* (-s *pattern*)

A SQL pattern to be used to filter the set of object schema names that are 
displayed. For most databases, the "schema name" refers to the name of the 
owner of the object.

### type

This can be used to restrict the types of objects that are displayed. If 
type is not provided, then all object types are returned. 
Available types are:

Type    | Description
--------|--------------------------
user    | Displays only user-created tables
system  | Displays only system tables
view    | Displays only views
alias   | Displays only aliases
synonym | Displays only synonyms

      ]]></Help>
    </Command>
    
    <Command name="\globals" class="org.sqsh.commands.Globals">

        <Internal>true</Internal>
        <Description><![CDATA[
           Displays all global variables
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\globals`

## Description

Displays all global variables. The definition of what constitutes a
global variable depends on the type of session you are running. For
a JDBC session this returns no results (since SQL typically does not
have the concept of globals).

## Options

None.
      ]]></Help>
    </Command>
    
    <Command name="\show" class="org.sqsh.commands.Show">

        <Description><![CDATA[
           Show various database metadata
        ]]></Description>
            <Help><![CDATA[
## Synopsis

See **Sub-commands** for specific command details

## Description

The `\show` command can be used to query about various aspects of the
remote server by polling the JDBC driver for information. This
command is boken into several sub-commands
   
Note that all object names provided to show are interpreted as follows:
   
If the name is not surrounded by double quotes, then the name is normalized
according to the database specific normalization rules (these rules are
defined in the internal jsqsh driver definition, and not all database
vendors are currently properly defined, see `\help drivers` for details).
So, for example, the following run while connected to DB2:
       
    \show tables mytab
   
is the equivalent of doing:
   
     \show tables MYTAB
       
because DB2 name normalization always converts to upper case, and matching
is case sensitive in DB2, so the table must be named "MYTAB" to get results
back.  If you wish to force a specific case, surround the name with double
quotes, like:
   
     \show tables "mytab"
   
which forces the name to be matched in exactly the case specified.
   
Please note that, other than the above notes, the behavior of describe in 
terms of wild card characters and name matching is entirely at the mercy
of how the JDBC driver is implemented.

## Scope of results

Many `\show` commands will attempt to automatically restrict the results to 
the current catalog and schema of the user's session.  To widen the scope, 
wildcards may be used. For example,
   
    \show tables
   
will automatically attempt to restrict the list of tables returned to the
current catalog and schema that the session resides in. The following returns
all tables in the current catalog and schema that start with a "p":
   
    \show tables p%
      
and the following shows all tables that start with a "p" in all schemas:
   
    \show tables %.p%
      
and the following shows all tables that start with a "p" across all catalogs
(databases) and all schemas:
   
    \show tables %.%.p%

## Sub-commands   

### \show attributes

`\show attributes [-p pattern] [[[catalog.]schema-pattern.]type-pattern]`
   
Displays the attributes of a user defined type (UDT).  The `-p` option
may be used to provide additional filtering for attributes matching the
provided pattern. 
       
### \show catalogs

`\show catalogs`
   
Shows the set of catalogs (typically databases) that are available 
within the target server. This command has no options.
       
### \show client info

`\show client info`
       
Displays the client driver information properties (if any).
   
### \show column privs

`\show column privs [-p col-pattern] [[[catalog.]schema-pattern.]obj-pattern]`
       
 Displays permissions for coluns of a table. The "-p" flag may be used to
 further restrict the output to just columns matching the specified pattern.
       
### \show columns

`\show columns [-e] [-p col-pattern] [[[catalog.]schema-pattern.]obj-pattern]`
       
Displays columns for a table or set of tables. The `-e` flag can be used
to reduce the number of columns displayed to what is considered the
"essential" set of columns. The `-p` flag may be used to restrict the
output to just columns matching the specified pattern

### \show driver version
       
`\show driver version`
   
Displays JDBC driver version information.
       
### \show exported keys

`\show exported keys [[catalog.]schema.]obj-name`
   
Displays a description of the foriegn key columns that reference a 
given table's primary key columns (the foreign key is exported by a
table).
   
### \show features

`\show features`
   
Displays a list of supported server features.
    
### \show function params

`\show function params [-e] [-p param-pattern] [[[catalog.]schema-pattern.]func-pattern]`
       
Displays parameter information for a function or set of functions.
The function-pattern argument can be used to filter to specific
functions. The `-e` flag limits the set of columns returned those that
are most likely to prove useful. The -p flag allows for an additional
pattern to filter only specific parameters.

### \show functions
       
`\show functions [-e] [[[catalog.]schema-pattern.]func-pattern]`
       
Displays a list of functions matching the provided search criteria. The
`-e` flag limits the set of columns returned to those that are considered
most likely to be useful.

### \show imported keys
   
`\show imported keys [[catalog.]schema.]table`
   
Retrieves a description of the primary key columns that are referenced 
by the given table's foreign key columns (the primary keys imported 
by a table)
       
### \show primary keys

`\show primary keys [[catalog.]schema.]table`
   
Displays the primary keys for a given table or set of tables.

### \show procedure params
       
`\show procedure params [-e] [-p param-pat] [[[catalog.]schema-pattern.]proc-pattern]`
       
Displays parameter information for a procedure or set of procedure.
The procedure-pattern argument can be used to filter to specific
procedures. The `-e` flag reduces the display output to columns that
are most likely to be considered useful. The `-p` flag can be used to
further filter the list of parameters.
       
### \show procedures

`\show procedures [[[catalog.]schema-pattern.]proc-pattern]`
       
Displays a list of procedures matching the provided search criteria.
       
### \show server version

`\show server version`
   
Shows server version and product information.

### \show schemas
       
`\show schemas [[catalog.]schema-pattern]`
       
Lists the available schemas in a catalog
       
### \show super tables

`\show super tables [[[catalog.]schema-pattern.]table-pattern]`
       
Retrieves a description of the table hierarchies defined in a particular 
schema in this database.
       
### \show super types

`\show super types [[[catalog.]schema-pattern.]type-pattern]`
   
Retrieves a description of the user-defined type (UDT) hierarchies defined 
in a particular schema in this database.
       
### \show table privs

`\show table privs [[[catalog.]schema-pattern.]table-pattern]`
   
Displays information able privileges on a given table.        
      
### \show tables

`\show tables [-e] [-T type] [[[catalog.]schema-pattern.]table-pattern]`
   
Displays information about any tabular object that appears in the
server, this includes tables, views, synonyms, etc.  The `-T` flag can
be used to filter on only specific table types (the set of available
types can be determined using `\show table types`).  The `-e` flag 
reduces the number of columns returned to just basic information 
about the tables (catalog, schema, name, and type).
       
### \show table types

`\show table types`
    
Shows the available types of tables in the database. The names returned
in this list, can be used to filter tables in the `\show tables` command.
       
### \show types

`\show types [-e]`
   
Lists the available data types in the server. The `-e` flag can be used
to produce a more simplified set of information about the available types.
       
### \show user types

`\show user types [[[catalog.]schema-pattern.]type-pattern]`
   
Lists the available data user defined types in the server. The 
type-pattern argument may be used to restrict the list of types
to a specific set.
       
### \show version columns

`\show version columns [[[catalog.]schema.]table`
   
Retrieves a description of a table's columns that are automatically 
updated when any value in a row is updated. They are unordered
       
## Common options

The following options are common to many of the object types that are
displayed via the show commands:
   
### --pattern=*pattern* (-p *pattern*)

A SQL pattern to be used to filter the set of information returned by the command.

### --type=*pattern* (-T *pattern*)

Used by `\show tables` to limit the tables returned to only specific types 
of tables.

### --essential (-e)

This option is available for some commands that can return a
large number of columns, and attempts to reduce the number of
columns down to an "essential" set. That is, a set of columns
that are thought to be the most useful.
   
## See also

[[\describe]], [[\tables]], [[\procs]]
      ]]></Help>
    </Command>
    
    <Command name="\prepare" class="org.sqsh.commands.Prepare">

        <Description><![CDATA[
           Display prepared query metadata
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\prepare`

## Description

The `\prepare` command causes the current SQL buffer to be prepared 
against the server and metadata about the prepared query to be
displayed, such as the columns that will be returned by the query
as well as information about any parameter markers that are contained
in the query.
   
Note that `\prepare` does not actually execute the SQL statement, for that
see the `\call` command

## Options

None

## See also

[[\call]]
      ]]></Help>
    </Command>
    
    <Command name="\stack" class="org.sqsh.commands.Stack">

        <Description><![CDATA[
           Display the stack trace of the most recently displayed error message
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\stack`

## Description

The `\stack` command is used to display the full stack trace of the most
recently displayed error message. If no error has occured within your
current session a message indicating as such is displayed.

## Options

None

## See also

[[ex_detail]]
      ]]></Help>
    </Command>
    
    <Command name="\setup" class="org.sqsh.commands.Setup">

        <Description><![CDATA[
           Simple guided setup for managing named connections
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\setup [connections | drivers]`

## Description

The `\setup` command provides a simple step-by-step setup for managing
named connections and JDBC driver definitions.   Given no arguments, it
presents a welcome screen asking you to choose if you want to manage
connections or want to manage drivers, otherwise it uses the wizard 
that you indicate on the command line.

## Options

### connections

Jumps straight into the connection setup wizard

### drivers

Jumps straight into the driver definition wizard

## See also

[[\connect]], [[\drivers]]
      ]]></Help>
    </Command>

    <Command name="\md" class="org.sqsh.commands.Md">

        <Internal>True</Internal>
        <Description><![CDATA[
           Test jsqsh's markdown rendering
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\md [-w width]`

## Description

The `\md` command treats the contents of the current SQL buffer as markdown
and renders it.  This is for testing jsqsh's markdown rendering engine and
should be treated as purely internal.

## Options

### --width=*width* (-w *width*)

Restricts the output to at most *width* characters.
      ]]></Help>
    </Command>

    <Command name="\wiki" class="org.sqsh.commands.Wiki">

        <Internal>True</Internal>
        <Description><![CDATA[
           Generate jsqsh documentation for the wiki
        ]]></Description>
            <Help><![CDATA[
## Synopsis

`\wiki [dest_dir]`

## Description

The `\wiki` command generates all of the jsqsh wiki documentation

## Options

### dest_dir

Directory in which to generate docs
      ]]></Help>
    </Command>
    
</Commands>
